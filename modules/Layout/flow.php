<?php

/**
 * Build a set of block flow elements that will look good regardless of the window size.
 * 
 * @example Make a pretty grid of data that wraps nicely and automatically resizes
 * <code type='php'>
 * Jackal::call("Layout/flow", array(
 * 	"cells"		=> array("cell content", "cell content", "cell content"),
 * 	"height"	=> 100,	// Default is 50px
 * 	"width"		=> 150 	// Default is 200px
 * ));
 * </code>
 * 
 * @param Array $cells Array of html data to populate the cells
 * @param String $background CSS background styles for the flow wrapper, default is white
 * @param String $cellBackground Background styles for every cell, defeault is white
 * @param String $border CSS border styles for the wrapper
 * @param String $margin CSS margin styles for the wrapper
 * @param String $padding CSS padding styles for the wrapper
 * @param Int $borderWidth The border width in pixels for every cell, default is zero
 * @param String $borderStyle The border style for every cell
 * @param String $borderColor The border color for every cell
 * @param Int $width The width of each cell in pixels
 * @param Int $cellPadding The cell padding, for best results leave the default as zero
 * @param Int $height The height in pixels of every cell
 * @param Bool $fill Use javascript to resize the blocks on window resize to nicely fill the space
 * 
 * @return void
 */

$settings = Jackal::setting("layout");
Jackal::loadHelper("layout");

// Get parameters
@($cells = (array) $URI["cells"]) || @($cells = false);
@($background = $URI["background"]) || @($background = $settings["flow"]["background"]) || ($background = "transparent");
@($cellBackground = $URI["cellBackground"]) || ($cellBackground = "transparent");
@($border = $URI["border"]) || @($border = $settings["flow"]["border"]) || ($border = "none");
@($margin = $URI["margin"]) || @($margin = $settings["flow"]["margin"]) || ($margin = "0px");
@($borderWidth = $URI["border-width"]) || @($borderWidth = $URI["borderWidth"]) || ($borderWidth = 0);
@($borderStyle = $URI["border-style"]) || @($borderStyle = $URI["borderStyle"]) || ($borderStyle = "solid");
@($borderColor = $URI["border-color"]) || @($borderColor = $URI["borderColor"]) || ($borderColor = "transparent");
@($width = $URI["width"]) || ($width = 200);
@($align = $URI["align"]) || ($align = "left");
@($padding = $URI["padding"]) || @($padding = $settings["flow"]["padding"]) || ($padding = 5);
@($height = $URI["height"]) || ($height = 50);
$cellPadding 	= isset($URI["cellPadding"]) ? (integer) $URI["cellPadding"] : 10 ;
$fill 			= isset($URI["fill"]) ? (boolean) $URI["fill"] : true ;
$borderWidth = layout_numbersOnly($borderWidth);
$width = layout_numbersOnly($width);
$height = layout_numbersOnly($height);
$cellPadding = layout_numbersOnly($cellPadding);
if (!$cells) return;

// Create a unique class and ID to use on the styles, this way the component can be loaded
// twice onto the page without conflicting with eachother's styles.
$this->loadCount = isset($this->loadCount) ? $this->loadCount + 1 : 1 ;
$className = "layout-flow-".$this->loadCount;
$classCell = "layout-flow-cell-".$this->loadCount;
$div_id = "LayoutFlow".$this->loadCount;

// Output every cell
echo "
	<div id='$div_id'>";
foreach($cells as $cell) {
	echo "
		<div class='layout-flow $className' style=''>
			<div class='layout-flow-cell $classCell'>
				$cell
			</div>
		</div>";
}

// Styles are generated by PHP because I want the ability to use Layout/flow
// in different situations with different styling. Default styles are loaded
// in the config, but can be overwritten by parameters passed into this method.
echo "
	<style type='text/css'>
		div#$div_id {
			width: 100%;
			border: $border;
			overflow: hidden;
		}
		div.$classCell {
			box-sizing: border-box;
			background: {$cellBackground};
			padding: {$cellPadding}px;
			height: ",($height - ($cellPadding * 2)),"px;
			text-align: $align;
			overflow: hidden;
		}
		div.$className {
			float: left;
			padding: 0px 20px;
			width: {$width}px;
			height: {$height}px;
			background: {$background};
			",($borderWidth ? "margin: 0px -{$borderWidth}px {$borderWidth}px -{$borderWidth}px;" : ""),"
			",($borderWidth ? "border-width: 0px {$borderWidth}px {$borderWidth}px {$borderWidth}px;" : ""),"
			",($borderWidth ? "border-color: none $borderColor none $borderColor;" : ""),"
			",($borderWidth ? "border-style: none $borderStyle none $borderStyle;" : ""),"
		}
	</style>
</div>";

// Disable javascript autofill
if (!$fill) return;
?>
<script type='text/javascript'>
(function(NS, $) {
	//  __________________________________________
	// /---------- Initialize namespace ----------\
	// There is no reason for these components to exist in the window object
//	(window[NS]) || (window[NS] = {});
	var $ns, ns = {}, $cells, $cell, borderWidth, resizeTimer;
	// \__________________________________________/
	
	// Width of each cell
	var width = <?php echo $width*1;?>;
	var height = <?php echo $height*1;?>;
	var totalCells = <?php echo count($cells);?>;

	//  _[ Initialize ]___________________________________
	// |                                                  |
	// | One-time initialization of namespace             |
	// |__________________________________________________|
	ns.initialize = function() {
		// Move resources that partial spit out into the head so that they don't have to be sent again
		$ns = $("#" + NS);
		$cells = $ns.children("div.layout-flow");
		$cell = $ns.find("div.layout-flow:first");

		// Using javascript to get border widths in-case anyone tries to style the cells
		// outside the provided parameters. Setting the value from PHP would be less portable.
		borderWidth = parseInt($cell.css("border-right-width")) + parseInt($cell.css("border-left-width"));

		// Make sure there is at least one pixel of border in the calculation for a smooth animation
		if (borderWidth<1) borderWidth = 1;

		ns.rebind();
	};

	ns.rebind = function() {
		$(window).resize(ns.getWidth);
		ns.getWidth();
	};

	ns.getWidth = function() {

		// Get the full width of the flow's container
		var fullWidth = $ns.width();

		// Calculate how many columns can fit
		var columns = Math.floor(fullWidth / width);
		if (columns>totalCells) columns = totalCells;

		// Calculate the number of rows
		var rows = Math.ceil(totalCells / columns);

		// Calculate the left and right padding for each column
		var padding = parseFloat( (fullWidth - (columns*width) - (borderWidth/2)) / (columns*2));

		// Set the height
		$ns.height((rows * height) + (rows * borderWidth));

		// Set the styles
		$cells.css({
			"padding-left"	: padding + "px",
			"padding-right"	: padding + "px"
		});

		// Apply borders
		$cells.css({
			"border-right"	: "<?php echo "{$borderWidth}px {$borderStyle} {$borderColor}"; ?>",
			"border-left"	: "<?php echo "{$borderWidth}px {$borderStyle} {$borderColor}"; ?>",
			"border-bottom"	: "<?php echo "{$borderWidth}px {$borderStyle} {$borderColor}"; ?>"
		});

		// Remove the border from the right most element
		$cells.filter(":last,:nth-child("+columns+"n)").css({"border-right" : "<?php echo $borderWidth;?>px solid transparent"});

		// Remove the left border from the left most elements
		$cells.filter(":nth-child("+columns+"n+1)").css({"border-left" : "<?php echo $borderWidth;?>px solid transparent"});

		// Remove the bottom border from the bottom most elements
		var gt = (rows-1) * columns;
		$cells.filter(":eq("+gt+"),:gt("+gt+")").css({"border-bottom" : "<?php echo $borderWidth;?>px solid transparent"});
	};

	$(ns.initialize);
})("<?php echo $div_id;?>", jQuery);
</script>